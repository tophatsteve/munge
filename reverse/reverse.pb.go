// Code generated by protoc-gen-go. DO NOT EDIT.
// source: reverse.proto

/*
Package reverse is a generated protocol buffer package.

It is generated from these files:
	reverse.proto

It has these top-level messages:
	ReverseRequest
	ReverseResponse
*/
package reverse

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ReverseRequest struct {
	Text string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
}

func (m *ReverseRequest) Reset()                    { *m = ReverseRequest{} }
func (m *ReverseRequest) String() string            { return proto.CompactTextString(m) }
func (*ReverseRequest) ProtoMessage()               {}
func (*ReverseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ReverseRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type ReverseResponse struct {
	Text string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
}

func (m *ReverseResponse) Reset()                    { *m = ReverseResponse{} }
func (m *ReverseResponse) String() string            { return proto.CompactTextString(m) }
func (*ReverseResponse) ProtoMessage()               {}
func (*ReverseResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ReverseResponse) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func init() {
	proto.RegisterType((*ReverseRequest)(nil), "reverse.ReverseRequest")
	proto.RegisterType((*ReverseResponse)(nil), "reverse.ReverseResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Reverse service

type ReverseClient interface {
	Reverse(ctx context.Context, in *ReverseRequest, opts ...grpc.CallOption) (*ReverseResponse, error)
}

type reverseClient struct {
	cc *grpc.ClientConn
}

func NewReverseClient(cc *grpc.ClientConn) ReverseClient {
	return &reverseClient{cc}
}

func (c *reverseClient) Reverse(ctx context.Context, in *ReverseRequest, opts ...grpc.CallOption) (*ReverseResponse, error) {
	out := new(ReverseResponse)
	err := grpc.Invoke(ctx, "/reverse.Reverse/reverse", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Reverse service

type ReverseServer interface {
	Reverse(context.Context, *ReverseRequest) (*ReverseResponse, error)
}

func RegisterReverseServer(s *grpc.Server, srv ReverseServer) {
	s.RegisterService(&_Reverse_serviceDesc, srv)
}

func _Reverse_Reverse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReverseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReverseServer).Reverse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reverse.Reverse/Reverse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReverseServer).Reverse(ctx, req.(*ReverseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Reverse_serviceDesc = grpc.ServiceDesc{
	ServiceName: "reverse.Reverse",
	HandlerType: (*ReverseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "reverse",
			Handler:    _Reverse_Reverse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reverse.proto",
}

func init() { proto.RegisterFile("reverse.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 117 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4a, 0x2d, 0x4b,
	0x2d, 0x2a, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0x54, 0xb8,
	0xf8, 0x82, 0x20, 0xcc, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x21, 0x2e, 0x96, 0x92,
	0xd4, 0x8a, 0x12, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x30, 0x5b, 0x49, 0x95, 0x8b, 0x1f,
	0xae, 0xaa, 0xb8, 0x20, 0x3f, 0xaf, 0x38, 0x15, 0x9b, 0x32, 0x23, 0x77, 0x2e, 0x76, 0xa8, 0x32,
	0x21, 0x1b, 0x2e, 0x98, 0x15, 0x42, 0xe2, 0x7a, 0x30, 0xbb, 0x51, 0x6d, 0x92, 0x92, 0xc0, 0x94,
	0x80, 0x18, 0x9e, 0xc4, 0x06, 0x76, 0xa5, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x14, 0x35, 0x49,
	0x5b, 0xb6, 0x00, 0x00, 0x00,
}
